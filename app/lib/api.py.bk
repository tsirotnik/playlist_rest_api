import os
import sys
import json

from database import Database
from functools import wraps
from cachetools import cached, LRUCache
from excepts import APIException, exception_handler
cache = LRUCache(maxsize=20)


class API(object):

    def __init__(self, auth):
        self.db = Database()

        if auth == "sys_account":
            self.auth = "sys_account"
        else:
            user = self.db.user.find_one(name=auth)
            if not user:
                raise APIException("invalid user")
            self.auth = auth

    # -------------------------------------------------------
    # @cached(cache)

    def userid(self, user_id_or_name):
        if isinstance(user_id_or_name, int):
            user = self.db.user.find_one(id=user_id_or_name)
        else:
            user = self.db.user.find_one(name=user_id_or_name)

        if user:
            return user['id']
        else:
            raise APIException("user does not exist")

    def user_exists(self, name):
        try:
            self.userid(name)
        except Exception as e:
            return False

        return True

    def assert_name_exists(self, name):
        self.userid(name)

    def assert_name_not_exists(self, name):
        try:
            self.userid(name)
        except Exception as e:
            return True

        raise APIException("pre-existing user error")
    # -------------------------------------------------------

    def songid(self, song_id):
        song = self.db.song.find_one(id=song_id)

        if song:
            return song['id']
        else:
            raise APIException("song does not exist")

    def assert_song_exists(self, song):
        self.songid(song)
        return True

    def assert_song_not_exists(self, song):
        try:
            self.songid(song)
        except Exception as e:
            return True

        raise APIException("pre-existing song error")

    # -------------------------------------------------------

    def playlist_show(self, name):
        self.assert_name_exists(name)
        playlists = [playlist['id'] for playlist in self.db.playlist.find(
            user_id=self.userid(name))]
        return playlists

    def assert_playlist_valid_for_user(self, name, playlist_id):
        self.assert_name_exists(name)
        if not playlist_id in self.playlist_show(name):
            raise APIException("playlist not valid for user")

        if not self.db.playlist.find_one(id=playlist_id):
            raise APIException(
                "playlist id {} does not exist".format(playlist_id))

    def song_in_playlist(self, playlist_id, song):
        song_id = self.songid(song)
        result = self.db.playlist_x_song.find_one(
            song_id=song_id, playlist_id=playlist_id)
        return True if result else False

    def assert_song_not_in_playlist(self, playlist_id, song):
        if self.song_in_playlist(playlist_id, song):
            raise APIException("song already in playlist")

    def assert_song_in_playlist(self, playlist_id, song):
        if not self.song_in_playlist(playlist_id, song):
            raise APIException("song not in playlist")

    # -------------------------------------------------------

    def add_user(self, name):
        self.assert_name_not_exists(name)
        self.db.user.insert({'name': name})
        # cache.clear()

    def delete_user(self, name):
        self.assert_name_exists(name)
        self.db.user.delete(name=name)

    def update_user(self, oldname, newname):
        self.assert_name_exists(oldname)
        self.assert_name_not_exists(newname)
        self.db.user.update(
            {'name': newname, 'id': self.userid(oldname)}, ['id'])

    def playlist_add(self, name):
        self.assert_name_exists(name)
        return self.db.playlist.insert({'user_id': self.userid(name)})

    def playlist_del(self, name, playlist_id):
        self.assert_name_exists(name)
        self.assert_playlist_valid_for_user(name, playlist_id)
        self.db.playlist.delete(id=playlist_id)

    def playlist_add_song(self, name, playlist_id, song):
        self.assert_name_exists(name)
        self.assert_song_exists(song)
        self.assert_playlist_valid_for_user(name, playlist_id)
        self.assert_song_not_in_playlist(playlist_id, song)
        song_id = self.songid(song)
        self.db.playlist_x_song.insert(
            {'playlist_id': playlist_id, 'song_id': song_id})

    def playlist_del_song(self, name, playlist_id, song):
        self.assert_name_exists(name)
        self.assert_song_exists(song)
        self.assert_playlist_valid_for_user(name, playlist_id)
        self.assert_song_in_playlist(playlist_id, song)
        song_id = self.song(song)
        self.db.playlist_x_song.delete(
            **{'playlist_id': playlist_id, 'song_id': song_id})

    def playlist_share(self, name, playlist_id, share_with):
        self.assert_name_exists(name)
        self.assert_name_exists(share_with)

        user_id = self.userid(name)
        shared_with_id = self.userid(share_with)

        if user_id == shared_with_id:
            raise APIException("cannot share a playlist with yourself")

        self.db.shared.upsert({'playlist_id': playlist_id,
                               "shared_to_user_id": shared_with_id}, ['playlist_id', 'shared_to_user_id'])

    def playlist_unshare(self, name, playlist_id, unshare_with):
        self.assert_name_exists(name)
        self.assert_name_exists(unshare_with)

        user_id = self.userid(name)
        unshare_with_id = self.userid(unshare_with)

        self.db.shared.delete(playlist_id=playlist_id,
                              shared_to_user_id=unshare_with_id)

    def dump_shared(self, playlist_id):
        statement = """
select user.name
from user, shared
where shared.shared_to_user_id = user.id
and shared.playlist_id = {}
""".format(playlist_id)

        return [row['name'] for row in self.db.db.query(statement)]

    def dump(self, username):
        statement = """
select playlist.id, song.title
from user, playlist, playlist_x_song,song
where name='Ankit Sacnite'
and user.id = playlist.user_id
and playlist_x_song.playlist_id = playlist.id
and playlist_x_song.song_id = song.id
order by playlist.id, song.id
""".format(username)

        results = self.db.db.query(statement)
        if not results:
            return None

        data = {'name': username, 'playlist': {}, 'shared': []}
        for row in results:
            if row['id'] in data['playlist']:
                data['playlist'][row['id']].append(row['title'])
            else:
                data['playlist'][row['id']] = []
        data['shared'] = self.dump_shared(row['id'])

        print json.dumps(data, indent=4, separators=[',', ':'])
        return data


if __name__ == "__main__":
    api = API('root')
    api.playlist_share("Ankit Sacnite", 2, "Ryo Daiki")
    #api.delete_user("Ankit Sacnite")
    #api.dump('Ankit Sacnite')

    exit()
    # api.insert_user("monkey")
    # api.delete_user("monkey")
    # api.insert_user("monkey")
    # api.delete_user("rexy")
    # api.insert_user("rexy")
    # api.insert_user("monkey")
    # api.update_user("monkey", "rexy")
    # api.playlist_add("rexy")
    # api.playlist_del("rexy", 7)
    print api.playlist_show("rexy")
    api.assert_song_exists(31)
    api.assert_song_exists("Havana")
    api.assert_song_in_playlist(1, 6)
    api.playlist_add_song("rexy", 4, "Havana")
    print api.playlist_show("rexy")
